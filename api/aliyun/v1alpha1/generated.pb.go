/*
Copyright 2022 The kubeall.com Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/kube-all/public-cloud/api/aliyun/v1alpha1/generated.proto

package v1alpha1

import (
	fmt "fmt"

	io "io"

	proto "github.com/gogo/protobuf/proto"

	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *Addon) Reset()      { *m = Addon{} }
func (*Addon) ProtoMessage() {}
func (*Addon) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ce37f0a3fd24e14, []int{0}
}
func (m *Addon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Addon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Addon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Addon.Merge(m, src)
}
func (m *Addon) XXX_Size() int {
	return m.Size()
}
func (m *Addon) XXX_DiscardUnknown() {
	xxx_messageInfo_Addon.DiscardUnknown(m)
}

var xxx_messageInfo_Addon proto.InternalMessageInfo

func (m *AliyunACK) Reset()      { *m = AliyunACK{} }
func (*AliyunACK) ProtoMessage() {}
func (*AliyunACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ce37f0a3fd24e14, []int{1}
}
func (m *AliyunACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AliyunACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AliyunACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliyunACK.Merge(m, src)
}
func (m *AliyunACK) XXX_Size() int {
	return m.Size()
}
func (m *AliyunACK) XXX_DiscardUnknown() {
	xxx_messageInfo_AliyunACK.DiscardUnknown(m)
}

var xxx_messageInfo_AliyunACK proto.InternalMessageInfo

func (m *AliyunACKList) Reset()      { *m = AliyunACKList{} }
func (*AliyunACKList) ProtoMessage() {}
func (*AliyunACKList) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ce37f0a3fd24e14, []int{2}
}
func (m *AliyunACKList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AliyunACKList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AliyunACKList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliyunACKList.Merge(m, src)
}
func (m *AliyunACKList) XXX_Size() int {
	return m.Size()
}
func (m *AliyunACKList) XXX_DiscardUnknown() {
	xxx_messageInfo_AliyunACKList.DiscardUnknown(m)
}

var xxx_messageInfo_AliyunACKList proto.InternalMessageInfo

func (m *AliyunACKSpec) Reset()      { *m = AliyunACKSpec{} }
func (*AliyunACKSpec) ProtoMessage() {}
func (*AliyunACKSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ce37f0a3fd24e14, []int{3}
}
func (m *AliyunACKSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AliyunACKSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AliyunACKSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliyunACKSpec.Merge(m, src)
}
func (m *AliyunACKSpec) XXX_Size() int {
	return m.Size()
}
func (m *AliyunACKSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_AliyunACKSpec.DiscardUnknown(m)
}

var xxx_messageInfo_AliyunACKSpec proto.InternalMessageInfo

func (m *AliyunACKStatus) Reset()      { *m = AliyunACKStatus{} }
func (*AliyunACKStatus) ProtoMessage() {}
func (*AliyunACKStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ce37f0a3fd24e14, []int{4}
}
func (m *AliyunACKStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AliyunACKStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AliyunACKStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliyunACKStatus.Merge(m, src)
}
func (m *AliyunACKStatus) XXX_Size() int {
	return m.Size()
}
func (m *AliyunACKStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AliyunACKStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AliyunACKStatus proto.InternalMessageInfo

func (m *AliyunTask) Reset()      { *m = AliyunTask{} }
func (*AliyunTask) ProtoMessage() {}
func (*AliyunTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ce37f0a3fd24e14, []int{5}
}
func (m *AliyunTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AliyunTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AliyunTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliyunTask.Merge(m, src)
}
func (m *AliyunTask) XXX_Size() int {
	return m.Size()
}
func (m *AliyunTask) XXX_DiscardUnknown() {
	xxx_messageInfo_AliyunTask.DiscardUnknown(m)
}

var xxx_messageInfo_AliyunTask proto.InternalMessageInfo

func (m *Ask) Reset()      { *m = Ask{} }
func (*Ask) ProtoMessage() {}
func (*Ask) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ce37f0a3fd24e14, []int{6}
}
func (m *Ask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Ask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ask.Merge(m, src)
}
func (m *Ask) XXX_Size() int {
	return m.Size()
}
func (m *Ask) XXX_DiscardUnknown() {
	xxx_messageInfo_Ask.DiscardUnknown(m)
}

var xxx_messageInfo_Ask proto.InternalMessageInfo

func (m *Kubernetes) Reset()      { *m = Kubernetes{} }
func (*Kubernetes) ProtoMessage() {}
func (*Kubernetes) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ce37f0a3fd24e14, []int{7}
}
func (m *Kubernetes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Kubernetes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Kubernetes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kubernetes.Merge(m, src)
}
func (m *Kubernetes) XXX_Size() int {
	return m.Size()
}
func (m *Kubernetes) XXX_DiscardUnknown() {
	xxx_messageInfo_Kubernetes.DiscardUnknown(m)
}

var xxx_messageInfo_Kubernetes proto.InternalMessageInfo

func (m *ManagedKubernetes) Reset()      { *m = ManagedKubernetes{} }
func (*ManagedKubernetes) ProtoMessage() {}
func (*ManagedKubernetes) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ce37f0a3fd24e14, []int{8}
}
func (m *ManagedKubernetes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManagedKubernetes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ManagedKubernetes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagedKubernetes.Merge(m, src)
}
func (m *ManagedKubernetes) XXX_Size() int {
	return m.Size()
}
func (m *ManagedKubernetes) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagedKubernetes.DiscardUnknown(m)
}

var xxx_messageInfo_ManagedKubernetes proto.InternalMessageInfo

func (m *Tag) Reset()      { *m = Tag{} }
func (*Tag) ProtoMessage() {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ce37f0a3fd24e14, []int{9}
}
func (m *Tag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(m, src)
}
func (m *Tag) XXX_Size() int {
	return m.Size()
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Addon)(nil), "github.com.kube_all.public_cloud.api.aliyun.v1alpha1.Addon")
	proto.RegisterType((*AliyunACK)(nil), "github.com.kube_all.public_cloud.api.aliyun.v1alpha1.AliyunACK")
	proto.RegisterType((*AliyunACKList)(nil), "github.com.kube_all.public_cloud.api.aliyun.v1alpha1.AliyunACKList")
	proto.RegisterType((*AliyunACKSpec)(nil), "github.com.kube_all.public_cloud.api.aliyun.v1alpha1.AliyunACKSpec")
	proto.RegisterType((*AliyunACKStatus)(nil), "github.com.kube_all.public_cloud.api.aliyun.v1alpha1.AliyunACKStatus")
	proto.RegisterType((*AliyunTask)(nil), "github.com.kube_all.public_cloud.api.aliyun.v1alpha1.AliyunTask")
	proto.RegisterType((*Ask)(nil), "github.com.kube_all.public_cloud.api.aliyun.v1alpha1.Ask")
	proto.RegisterType((*Kubernetes)(nil), "github.com.kube_all.public_cloud.api.aliyun.v1alpha1.Kubernetes")
	proto.RegisterType((*ManagedKubernetes)(nil), "github.com.kube_all.public_cloud.api.aliyun.v1alpha1.ManagedKubernetes")
	proto.RegisterType((*Tag)(nil), "github.com.kube_all.public_cloud.api.aliyun.v1alpha1.Tag")
}

func init() {
	proto.RegisterFile("github.com/kube-all/public-cloud/api/aliyun/v1alpha1/generated.proto", fileDescriptor_8ce37f0a3fd24e14)
}

var fileDescriptor_8ce37f0a3fd24e14 = []byte{
	// 1280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0x8e, 0x63, 0xe7, 0xc7, 0xe3, 0xb4, 0x69, 0x26, 0x2d, 0x5d, 0x22, 0x70, 0x23, 0x23, 0x41,
	0x41, 0x64, 0xb7, 0x8d, 0xaa, 0x0a, 0xc4, 0x05, 0x24, 0x76, 0x54, 0xac, 0xb4, 0x10, 0x26, 0x56,
	0x85, 0x02, 0x62, 0x19, 0xef, 0x9c, 0x6e, 0x06, 0xef, 0x1f, 0x3b, 0xb3, 0x06, 0x73, 0x03, 0x8f,
	0x00, 0xcf, 0xc1, 0x1d, 0x12, 0x4f, 0xc0, 0x4d, 0x2f, 0x2b, 0x71, 0xd3, 0x1b, 0x2a, 0x6a, 0x5e,
	0x04, 0xcd, 0xec, 0x78, 0xd7, 0x4e, 0x8a, 0x14, 0xdc, 0xbb, 0x9d, 0x73, 0xbe, 0xf9, 0xce, 0x99,
	0xef, 0x9c, 0x39, 0x1e, 0xa3, 0x8e, 0xcf, 0xe5, 0x69, 0xd6, 0xb7, 0xbd, 0x38, 0x74, 0x06, 0x59,
	0x1f, 0x76, 0x68, 0x10, 0x38, 0x49, 0xd6, 0x0f, 0xb8, 0xb7, 0xe3, 0x05, 0x71, 0xc6, 0x1c, 0x9a,
	0x70, 0x87, 0x06, 0x7c, 0x94, 0x45, 0xce, 0xf0, 0x36, 0x0d, 0x92, 0x53, 0x7a, 0xdb, 0xf1, 0x21,
	0x82, 0x94, 0x4a, 0x60, 0x76, 0x92, 0xc6, 0x32, 0xc6, 0x77, 0x4a, 0x16, 0x5b, 0xb1, 0xb8, 0x34,
	0x08, 0xec, 0x9c, 0xc5, 0xd5, 0x2c, 0x36, 0x4d, 0xb8, 0x9d, 0xb3, 0xd8, 0x13, 0x96, 0xad, 0x9d,
	0xa9, 0xd8, 0x7e, 0xec, 0xc7, 0x8e, 0x26, 0xeb, 0x67, 0x8f, 0xf4, 0x4a, 0x2f, 0xf4, 0x57, 0x1e,
	0x64, 0xeb, 0xce, 0xe0, 0x3d, 0x61, 0xf3, 0x58, 0x25, 0x14, 0x52, 0xef, 0x94, 0x47, 0x90, 0x8e,
	0x9c, 0x64, 0xe0, 0x2b, 0x83, 0x70, 0x42, 0x90, 0xd4, 0x19, 0x9e, 0x4b, 0x6d, 0xeb, 0xee, 0x7f,
	0xed, 0x4a, 0xb3, 0x48, 0xf2, 0x10, 0x1c, 0xe1, 0x9d, 0x42, 0x48, 0xcf, 0xee, 0x6b, 0xfd, 0x88,
	0x96, 0xf6, 0x18, 0x8b, 0x23, 0xbc, 0x8d, 0x6a, 0x11, 0x0d, 0xc1, 0xaa, 0x6c, 0x57, 0x6e, 0xd6,
	0xf7, 0xd7, 0x1e, 0x3f, 0xbb, 0xb1, 0x30, 0x7e, 0x76, 0xa3, 0xf6, 0x09, 0x0d, 0x81, 0x68, 0x0f,
	0x7e, 0x13, 0x2d, 0x7b, 0x71, 0xf4, 0x88, 0xfb, 0xd6, 0xa2, 0xc6, 0x5c, 0x36, 0x98, 0xe5, 0xb6,
	0xb6, 0x12, 0xe3, 0xc5, 0xef, 0xa2, 0x55, 0xc6, 0x05, 0xed, 0x07, 0xc0, 0xac, 0xea, 0x76, 0xe5,
	0xe6, 0xea, 0xfe, 0x15, 0x83, 0x5c, 0xed, 0x18, 0x3b, 0x29, 0x10, 0xad, 0x3f, 0x16, 0x51, 0x7d,
	0x4f, 0x2b, 0xb6, 0xd7, 0x3e, 0xc4, 0x5f, 0xa3, 0x55, 0x75, 0x42, 0x46, 0x25, 0xd5, 0x99, 0x34,
	0x76, 0x6f, 0xd9, 0xf9, 0xc9, 0xec, 0xe9, 0x93, 0xd9, 0xc9, 0xc0, 0x57, 0x06, 0x61, 0x2b, 0xb4,
	0x3d, 0xbc, 0x6d, 0x7f, 0xda, 0xff, 0x06, 0x3c, 0xf9, 0x00, 0x24, 0xdd, 0xc7, 0x26, 0x1a, 0x2a,
	0x6d, 0xa4, 0x60, 0xc5, 0x80, 0x6a, 0x22, 0x01, 0x4f, 0x9f, 0xa1, 0xb1, 0xdb, 0xb6, 0xe7, 0x29,
	0xa9, 0x5d, 0x24, 0x7c, 0x9c, 0x80, 0x57, 0x8a, 0xa5, 0x56, 0x44, 0xd3, 0xe3, 0x10, 0x2d, 0x0b,
	0x49, 0x65, 0x26, 0xb4, 0x04, 0x8d, 0xdd, 0x83, 0x97, 0x0d, 0xa4, 0xc9, 0x4a, 0xcd, 0xf3, 0x35,
	0x31, 0x41, 0x5a, 0x7f, 0x56, 0xd0, 0xa5, 0x02, 0x7b, 0x9f, 0x0b, 0x89, 0xbf, 0x3c, 0xa7, 0xa4,
	0x7d, 0x31, 0x25, 0xd5, 0x6e, 0xad, 0x63, 0x51, 0xb5, 0x89, 0x65, 0x4a, 0x45, 0x86, 0x96, 0xb8,
	0x84, 0x50, 0x58, 0x8b, 0xdb, 0xd5, 0x9b, 0x8d, 0xdd, 0x0f, 0x5f, 0xf2, 0x74, 0xfb, 0x97, 0x4c,
	0xac, 0xa5, 0xae, 0x62, 0x25, 0x39, 0x79, 0xeb, 0xd7, 0xea, 0xd4, 0xa9, 0x94, 0xb8, 0xf8, 0x2e,
	0x5a, 0xf3, 0x82, 0x4c, 0x48, 0x48, 0x5d, 0x39, 0x4a, 0x26, 0xdd, 0xba, 0x69, 0x76, 0x37, 0xda,
	0xb9, 0xaf, 0x37, 0x4a, 0x80, 0x34, 0xbc, 0x72, 0x81, 0x3f, 0x47, 0x55, 0x2a, 0x06, 0xa6, 0xe8,
	0xef, 0xcf, 0x99, 0xad, 0x18, 0xec, 0x37, 0x4c, 0xa4, 0xea, 0x9e, 0x18, 0x10, 0x45, 0x89, 0x25,
	0x42, 0x8a, 0x22, 0x8d, 0x40, 0xc2, 0xa4, 0xd8, 0x1f, 0xcd, 0x17, 0xe0, 0xb0, 0xe0, 0x29, 0x7b,
	0xb8, 0xb4, 0x91, 0xa9, 0x38, 0xf8, 0x97, 0x0a, 0xc2, 0x21, 0x8d, 0xa8, 0x0f, 0xcc, 0x9d, 0x0a,
	0x5f, 0xd3, 0xe1, 0xef, 0xcd, 0x17, 0xfe, 0x41, 0xce, 0x37, 0x95, 0xc5, 0xab, 0x26, 0x8b, 0x8d,
	0x73, 0x2e, 0xb2, 0x11, 0x9e, 0x35, 0xb5, 0x7e, 0x5b, 0x44, 0xeb, 0x67, 0xfa, 0x15, 0xdf, 0x42,
	0x68, 0x52, 0x2f, 0xce, 0x4c, 0xb5, 0x36, 0x0c, 0x6b, 0xdd, 0x54, 0xab, 0xdb, 0x21, 0x75, 0x03,
	0xea, 0xb2, 0x0b, 0x4f, 0x99, 0xaf, 0x10, 0x82, 0xef, 0x13, 0x9e, 0x52, 0xc9, 0xe3, 0xc8, 0xe8,
	0xfe, 0xce, 0xc5, 0x3a, 0xbc, 0xc7, 0x43, 0x28, 0x15, 0x3e, 0x28, 0x58, 0xc8, 0x14, 0x23, 0x06,
	0xb4, 0x24, 0xa9, 0x18, 0x28, 0x4d, 0xab, 0xf3, 0x97, 0x34, 0xd7, 0xa3, 0x47, 0xc5, 0xa0, 0x6c,
	0x71, 0xb5, 0x12, 0x24, 0x67, 0x6f, 0xfd, 0x5e, 0x41, 0xa8, 0x04, 0xe1, 0xfb, 0xa8, 0xa6, 0xa6,
	0xb5, 0xb9, 0xb1, 0xff, 0xe7, 0x3c, 0xc5, 0x10, 0x52, 0x2b, 0xa2, 0x59, 0x94, 0xfa, 0x29, 0x7c,
	0x9b, 0x81, 0x90, 0x4a, 0xfd, 0xc5, 0x59, 0xf5, 0x49, 0xee, 0x51, 0xea, 0x1b, 0x50, 0x97, 0xe1,
	0xb7, 0xd0, 0x8a, 0xca, 0x4b, 0xc1, 0xab, 0xb3, 0xf2, 0xab, 0xf4, 0xba, 0x1d, 0xb2, 0xac, 0xdc,
	0x5d, 0xd6, 0xfa, 0xab, 0x8e, 0xd4, 0x1d, 0x98, 0xfb, 0x42, 0xbe, 0x8d, 0x56, 0x92, 0x34, 0x7e,
	0xc4, 0x03, 0x30, 0x79, 0xad, 0x9b, 0x2d, 0x2b, 0x47, 0xb9, 0x99, 0x4c, 0xfc, 0xd3, 0x21, 0xf4,
	0xe4, 0xae, 0xbe, 0x30, 0x84, 0x9e, 0xbd, 0x93, 0x10, 0x7a, 0x56, 0x7c, 0x8c, 0x70, 0x79, 0x35,
	0xdc, 0x21, 0xa4, 0x42, 0x75, 0x4a, 0x4d, 0xef, 0x2e, 0x3a, 0xbb, 0xec, 0xdf, 0x87, 0x39, 0x80,
	0x6c, 0x0c, 0xce, 0x9a, 0x54, 0x06, 0x49, 0xca, 0x87, 0x54, 0x82, 0xfb, 0x43, 0x1c, 0x81, 0xb5,
	0xa4, 0x7f, 0xd5, 0x8a, 0x0c, 0x8e, 0x72, 0xdf, 0x49, 0x1c, 0x01, 0x69, 0x24, 0xe5, 0x02, 0xef,
	0xa0, 0x7a, 0x0a, 0x3e, 0x8f, 0x23, 0xa5, 0xe7, 0xb2, 0x0e, 0x5c, 0x0c, 0x55, 0xa2, 0x1d, 0x5d,
	0x46, 0x56, 0x53, 0xf3, 0x85, 0x09, 0x7a, 0x05, 0x22, 0x96, 0xc4, 0x3c, 0x92, 0xae, 0xe9, 0x2c,
	0xea, 0x79, 0x20, 0x84, 0xb5, 0xa2, 0x03, 0xbe, 0x66, 0xf6, 0x5e, 0x3d, 0x30, 0xa8, 0x23, 0x0d,
	0xda, 0xd3, 0x18, 0x72, 0x15, 0x5e, 0x60, 0xc5, 0x9f, 0xa1, 0xeb, 0x02, 0xd2, 0x21, 0xf7, 0xc0,
	0x65, 0x5c, 0x78, 0xf1, 0x10, 0xd2, 0x91, 0xae, 0x94, 0xb0, 0x56, 0xb7, 0xab, 0x4a, 0x89, 0xf1,
	0xb3, 0x1b, 0xd7, 0x8e, 0x73, 0x48, 0x67, 0x82, 0x50, 0x25, 0x12, 0xe4, 0x9a, 0x78, 0x91, 0x59,
	0xdd, 0x50, 0xa5, 0x02, 0x67, 0x56, 0x7d, 0xb6, 0x45, 0x4e, 0xb4, 0x95, 0x18, 0xaf, 0x52, 0x2d,
	0x88, 0x7d, 0x9f, 0x47, 0x7e, 0xde, 0x1a, 0x68, 0xb6, 0x6e, 0xf7, 0x73, 0x5f, 0xde, 0x1a, 0x41,
	0xb9, 0xc0, 0x5f, 0xa0, 0x9a, 0xa4, 0xbe, 0xb0, 0x1a, 0xfa, 0xe2, 0xcd, 0x39, 0xac, 0x7b, 0xd4,
	0x9f, 0xba, 0x12, 0xd4, 0x17, 0x44, 0x93, 0xe2, 0x43, 0xb4, 0xc9, 0x20, 0x00, 0x75, 0xc5, 0x5d,
	0xf5, 0x02, 0x02, 0x4f, 0xcf, 0x8f, 0x35, 0x2d, 0xf0, 0x96, 0xd9, 0x80, 0x3b, 0x06, 0x72, 0x54,
	0x20, 0x08, 0x66, 0xe7, 0x6c, 0xea, 0x84, 0x13, 0x71, 0x3d, 0xce, 0x52, 0xeb, 0xd2, 0xec, 0x09,
	0x8d, 0xaa, 0xed, 0x6e, 0x87, 0x90, 0x86, 0x01, 0xb6, 0x39, 0x4b, 0xd5, 0x0b, 0x49, 0xdd, 0x4f,
	0xdd, 0x4b, 0x97, 0x67, 0xdb, 0xa2, 0x67, 0xec, 0xa4, 0x40, 0x60, 0x0f, 0x2d, 0x53, 0xf5, 0x44,
	0x13, 0xd6, 0xba, 0x56, 0xe4, 0x83, 0x39, 0x47, 0x91, 0xe2, 0x28, 0x8b, 0xa5, 0x97, 0x82, 0x18,
	0x6a, 0x35, 0x2a, 0x44, 0x44, 0xa5, 0x0b, 0x91, 0x4c, 0x47, 0xd6, 0x15, 0x2d, 0x47, 0x31, 0x2a,
	0x8e, 0x23, 0x2a, 0x0f, 0x94, 0x83, 0xd4, 0xc5, 0xe4, 0x13, 0xbf, 0x81, 0x96, 0x86, 0x89, 0xc7,
	0x99, 0xb5, 0xa1, 0x4f, 0x50, 0x8c, 0xb7, 0x87, 0xca, 0x48, 0x72, 0x1f, 0x76, 0x50, 0x63, 0x28,
	0xbe, 0xe3, 0xd2, 0x3b, 0x75, 0x39, 0x13, 0x16, 0xd6, 0x2d, 0x77, 0x59, 0x8d, 0xdd, 0x87, 0xb9,
	0xb9, 0xcb, 0x04, 0x41, 0xc3, 0xe2, 0x1b, 0xb7, 0xd1, 0x86, 0x00, 0x2f, 0x4b, 0xb9, 0x1c, 0xb9,
	0x7e, 0x1a, 0x67, 0x89, 0xba, 0x3a, 0x9b, 0x3a, 0xc2, 0x75, 0x13, 0x61, 0xfd, 0xd8, 0x00, 0xee,
	0x29, 0x7f, 0x97, 0x91, 0x75, 0x31, 0x6b, 0xc0, 0x7b, 0x68, 0x3d, 0x05, 0x11, 0x67, 0xa9, 0x07,
	0xc6, 0x64, 0x5d, 0x9d, 0xa5, 0x20, 0xb3, 0x6e, 0x72, 0x16, 0xdf, 0x5a, 0x43, 0x53, 0x3f, 0xbd,
	0xad, 0x4d, 0x74, 0xfe, 0x27, 0xb0, 0xd5, 0x45, 0xd5, 0x1e, 0xf5, 0xf1, 0xeb, 0xa8, 0x3a, 0x80,
	0x91, 0x19, 0x7c, 0xc5, 0xfb, 0xe0, 0x10, 0x46, 0x44, 0xd9, 0xb5, 0x4c, 0x34, 0xc8, 0x26, 0x63,
	0xae, 0x94, 0x49, 0x19, 0x49, 0xee, 0xdb, 0x3f, 0x79, 0xfc, 0xbc, 0xb9, 0xf0, 0xe4, 0x79, 0x73,
	0xe1, 0xe9, 0xf3, 0xe6, 0xc2, 0x4f, 0xe3, 0x66, 0xe5, 0xf1, 0xb8, 0x59, 0x79, 0x32, 0x6e, 0x56,
	0x9e, 0x8e, 0x9b, 0x95, 0xbf, 0xc7, 0xcd, 0xca, 0xcf, 0xff, 0x34, 0x17, 0x4e, 0xee, 0xcc, 0xf3,
	0x27, 0xe6, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x78, 0xa1, 0x9d, 0xd5, 0xfb, 0x0c, 0x00, 0x00,
}

func (m *Addon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Addon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Addon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Disabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i -= len(m.Config)
	copy(dAtA[i:], m.Config)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Config)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AliyunACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AliyunACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AliyunACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AliyunACKList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AliyunACKList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AliyunACKList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AliyunACKSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AliyunACKSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AliyunACKSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ManagedKubernetes.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Kubernetes.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Ask.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i -= len(m.ClusterType)
	copy(dAtA[i:], m.ClusterType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterType)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AliyunACKStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AliyunACKStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AliyunACKStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for iNdEx := len(m.Tasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.Expiration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	i -= len(m.Config)
	copy(dAtA[i:], m.Config)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Config)))
	i--
	dAtA[i] = 0x12
	i -= len(m.ClusterID)
	copy(dAtA[i:], m.ClusterID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterID)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AliyunTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AliyunTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AliyunTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.TaskID)
	copy(dAtA[i:], m.TaskID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TaskID)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.RequestID)
	copy(dAtA[i:], m.RequestID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.RequestID)))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Time.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Ask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.ResourceGroupId)
	copy(dAtA[i:], m.ResourceGroupId)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ResourceGroupId)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	i -= len(m.SecurityGroupId)
	copy(dAtA[i:], m.SecurityGroupId)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SecurityGroupId)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	if len(m.VswitchIds) > 0 {
		for iNdEx := len(m.VswitchIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VswitchIds[iNdEx])
			copy(dAtA[i:], m.VswitchIds[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.VswitchIds[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	i -= len(m.Vpcid)
	copy(dAtA[i:], m.Vpcid)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Vpcid)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	i--
	if m.SnatEntry {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	if len(m.Addons) > 0 {
		for iNdEx := len(m.Addons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Addons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	i -= len(m.Timezone)
	copy(dAtA[i:], m.Timezone)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Timezone)))
	i--
	dAtA[i] = 0x72
	i -= len(m.ServiceCIDR)
	copy(dAtA[i:], m.ServiceCIDR)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServiceCIDR)))
	i--
	dAtA[i] = 0x6a
	i--
	if m.DeletionProtection {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x60
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	i -= len(m.LoggingType)
	copy(dAtA[i:], m.LoggingType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.LoggingType)))
	i--
	dAtA[i] = 0x52
	i -= len(m.Zoneid)
	copy(dAtA[i:], m.Zoneid)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Zoneid)))
	i--
	dAtA[i] = 0x4a
	if len(m.ServiceDiscoveryTypes) > 0 {
		for iNdEx := len(m.ServiceDiscoveryTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServiceDiscoveryTypes[iNdEx])
			copy(dAtA[i:], m.ServiceDiscoveryTypes[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServiceDiscoveryTypes[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	i--
	if m.EndpointPublicAccess {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	i -= len(m.RegionId)
	copy(dAtA[i:], m.RegionId)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.RegionId)))
	i--
	dAtA[i] = 0x32
	i--
	if m.PrivateZone {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i -= len(m.KubernetesVersion)
	copy(dAtA[i:], m.KubernetesVersion)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KubernetesVersion)))
	i--
	dAtA[i] = 0x22
	i -= len(m.ClusterSpec)
	copy(dAtA[i:], m.ClusterSpec)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterSpec)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Profile)
	copy(dAtA[i:], m.Profile)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Profile)))
	i--
	dAtA[i] = 0x12
	i -= len(m.ClusterType)
	copy(dAtA[i:], m.ClusterType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterType)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Kubernetes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Kubernetes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Kubernetes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ManagedKubernetes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManagedKubernetes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManagedKubernetes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Value)
	copy(dAtA[i:], m.Value)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Value)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Key)
	copy(dAtA[i:], m.Key)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Key)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Addon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Config)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	return n
}

func (m *AliyunACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AliyunACKList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *AliyunACKSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterType)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Ask.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Kubernetes.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ManagedKubernetes.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AliyunACKStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Config)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Expiration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *AliyunTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Time.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.RequestID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TaskID)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *Ask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterType)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Profile)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ClusterSpec)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.KubernetesVersion)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	l = len(m.RegionId)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	if len(m.ServiceDiscoveryTypes) > 0 {
		for _, s := range m.ServiceDiscoveryTypes {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.Zoneid)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.LoggingType)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	n += 2
	l = len(m.ServiceCIDR)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Timezone)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Addons) > 0 {
		for _, e := range m.Addons {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	n += 3
	l = len(m.Vpcid)
	n += 2 + l + sovGenerated(uint64(l))
	if len(m.VswitchIds) > 0 {
		for _, s := range m.VswitchIds {
			l = len(s)
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.SecurityGroupId)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.ResourceGroupId)
	n += 2 + l + sovGenerated(uint64(l))
	return n
}

func (m *Kubernetes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ManagedKubernetes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Tag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Value)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Addon) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Addon{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Config:` + fmt.Sprintf("%v", this.Config) + `,`,
		`Disabled:` + fmt.Sprintf("%v", this.Disabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AliyunACK) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AliyunACK{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "AliyunACKSpec", "AliyunACKSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "AliyunACKStatus", "AliyunACKStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AliyunACKList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]AliyunACK{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "AliyunACK", "AliyunACK", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&AliyunACKList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *AliyunACKSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AliyunACKSpec{`,
		`ClusterType:` + fmt.Sprintf("%v", this.ClusterType) + `,`,
		`Ask:` + strings.Replace(strings.Replace(this.Ask.String(), "Ask", "Ask", 1), `&`, ``, 1) + `,`,
		`Kubernetes:` + strings.Replace(strings.Replace(this.Kubernetes.String(), "Kubernetes", "Kubernetes", 1), `&`, ``, 1) + `,`,
		`ManagedKubernetes:` + strings.Replace(strings.Replace(this.ManagedKubernetes.String(), "ManagedKubernetes", "ManagedKubernetes", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AliyunACKStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTasks := "[]AliyunTask{"
	for _, f := range this.Tasks {
		repeatedStringForTasks += strings.Replace(strings.Replace(f.String(), "AliyunTask", "AliyunTask", 1), `&`, ``, 1) + ","
	}
	repeatedStringForTasks += "}"
	s := strings.Join([]string{`&AliyunACKStatus{`,
		`ClusterID:` + fmt.Sprintf("%v", this.ClusterID) + `,`,
		`Config:` + fmt.Sprintf("%v", this.Config) + `,`,
		`Expiration:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Expiration), "Time", "v1.Time", 1), `&`, ``, 1) + `,`,
		`Tasks:` + repeatedStringForTasks + `,`,
		`}`,
	}, "")
	return s
}
func (this *AliyunTask) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AliyunTask{`,
		`Time:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Time), "Time", "v1.Time", 1), `&`, ``, 1) + `,`,
		`RequestID:` + fmt.Sprintf("%v", this.RequestID) + `,`,
		`TaskID:` + fmt.Sprintf("%v", this.TaskID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ask) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTags := "[]Tag{"
	for _, f := range this.Tags {
		repeatedStringForTags += strings.Replace(strings.Replace(f.String(), "Tag", "Tag", 1), `&`, ``, 1) + ","
	}
	repeatedStringForTags += "}"
	repeatedStringForAddons := "[]Addon{"
	for _, f := range this.Addons {
		repeatedStringForAddons += strings.Replace(strings.Replace(f.String(), "Addon", "Addon", 1), `&`, ``, 1) + ","
	}
	repeatedStringForAddons += "}"
	s := strings.Join([]string{`&Ask{`,
		`ClusterType:` + fmt.Sprintf("%v", this.ClusterType) + `,`,
		`Profile:` + fmt.Sprintf("%v", this.Profile) + `,`,
		`ClusterSpec:` + fmt.Sprintf("%v", this.ClusterSpec) + `,`,
		`KubernetesVersion:` + fmt.Sprintf("%v", this.KubernetesVersion) + `,`,
		`PrivateZone:` + fmt.Sprintf("%v", this.PrivateZone) + `,`,
		`RegionId:` + fmt.Sprintf("%v", this.RegionId) + `,`,
		`EndpointPublicAccess:` + fmt.Sprintf("%v", this.EndpointPublicAccess) + `,`,
		`ServiceDiscoveryTypes:` + fmt.Sprintf("%v", this.ServiceDiscoveryTypes) + `,`,
		`Zoneid:` + fmt.Sprintf("%v", this.Zoneid) + `,`,
		`LoggingType:` + fmt.Sprintf("%v", this.LoggingType) + `,`,
		`Tags:` + repeatedStringForTags + `,`,
		`DeletionProtection:` + fmt.Sprintf("%v", this.DeletionProtection) + `,`,
		`ServiceCIDR:` + fmt.Sprintf("%v", this.ServiceCIDR) + `,`,
		`Timezone:` + fmt.Sprintf("%v", this.Timezone) + `,`,
		`Addons:` + repeatedStringForAddons + `,`,
		`SnatEntry:` + fmt.Sprintf("%v", this.SnatEntry) + `,`,
		`Vpcid:` + fmt.Sprintf("%v", this.Vpcid) + `,`,
		`VswitchIds:` + fmt.Sprintf("%v", this.VswitchIds) + `,`,
		`SecurityGroupId:` + fmt.Sprintf("%v", this.SecurityGroupId) + `,`,
		`ResourceGroupId:` + fmt.Sprintf("%v", this.ResourceGroupId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Kubernetes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Kubernetes{`,
		`}`,
	}, "")
	return s
}
func (this *ManagedKubernetes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ManagedKubernetes{`,
		`}`,
	}, "")
	return s
}
func (this *Tag) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Tag{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Addon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Addon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Addon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AliyunACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AliyunACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AliyunACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AliyunACKList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AliyunACKList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AliyunACKList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, AliyunACK{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AliyunACKSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AliyunACKSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AliyunACKSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kubernetes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Kubernetes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagedKubernetes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ManagedKubernetes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AliyunACKStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AliyunACKStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AliyunACKStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Expiration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, AliyunTask{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AliyunTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AliyunTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AliyunTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterSpec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterSpec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateZone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrivateZone = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointPublicAccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndpointPublicAccess = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceDiscoveryTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceDiscoveryTypes = append(m.ServiceDiscoveryTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zoneid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zoneid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoggingType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoggingType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletionProtection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeletionProtection = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceCIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceCIDR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timezone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addons = append(m.Addons, Addon{})
			if err := m.Addons[len(m.Addons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnatEntry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SnatEntry = bool(v != 0)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vpcid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vpcid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VswitchIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VswitchIds = append(m.VswitchIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceGroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceGroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Kubernetes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Kubernetes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Kubernetes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManagedKubernetes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManagedKubernetes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManagedKubernetes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
